(ns clj-watson.controller.dependency-check.vulnerability
  (:require
   [clj-watson.diplomat.dependency :as diplomat.dependency]
   [clj-watson.logic.dependency :as logic.dependency]
   [clj-watson.logic.dependency-check.vulnerability :as logic.dc.vulnerability]
   [clojure.string :as string]
   [version-clj.core :as version])
  (:import
   (org.owasp.dependencycheck.dependency Dependency)))

(defn ^:private extract-vulnerabilities-information-from-dependency
  [dependency dependency-current-version all-versions]
  (->> (.getVulnerabilities dependency)
       (pmap #(logic.dc.vulnerability/get-information dependency-current-version all-versions %))
       (filterv identity)
       (sort-by (comp :value first :identifiers :advisory))))

(defn ^:private safe-version-from-vulnerabilities [vulnerabilities]
  (let [versions-map (->> vulnerabilities (map :safe-versions) (map last))
        version-kind (first (transduce (map keys) (comp set concat) versions-map))
        versions (transduce (map vals) concat versions-map)
        version (last (version/version-sort versions))]
    (when version
      {version-kind version})))

(defn ^:private extract-from-dependency [project-dependencies repositories ^Dependency dependency]
  (when-let [dependency-name (some-> dependency .getName (string/replace #":" "/") symbol)]
    (let [dependency-map (first (filter #(= (:dependency %) dependency-name) project-dependencies))
          dependency-current-version (logic.dependency/get-dependency-version dependency-map)
          all-versions (diplomat.dependency/get-all-versions! dependency-name repositories)
          vulnerabilities (extract-vulnerabilities-information-from-dependency dependency dependency-current-version all-versions)
          safe-version (safe-version-from-vulnerabilities vulnerabilities)]
      (when (seq vulnerabilities)
        (-> dependency-map
            (assoc :vulnerabilities vulnerabilities)
            (assoc :secure-version safe-version)
            (assoc :dependency dependency-name))))))

(defn extract [scanned-dependencies dependencies repositories]
  (let [vulnerable-dependencies (->> scanned-dependencies
                                     (map (partial extract-from-dependency dependencies repositories))
                                     (filterv identity)
                                     (sort-by :dependency-name))]
    vulnerable-dependencies))
