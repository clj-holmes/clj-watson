(ns clj-watson.controller.github.vulnerability
  (:require
   [clj-watson.diplomat.dependency :as diplomat.dependency]
   [clj-watson.diplomat.github.advisory :as diplomat.gh.advisory]
   [clj-watson.logic.github.vulnerability :as logic.gh.vulnerability]
   [clj-watson.logic.rules.allowlist :as logic.rules.allowlist])
  (:import
   (java.time ZoneOffset ZonedDateTime)))

(def ^:private dependency-rename
  {'org.jdom/jdom2 'org.jdom/jdom})

(defn ^:private latest-dependency-version
  [dependency all-dependency-vulnerabilities repositories]
  (let [latest-version (diplomat.dependency/get-latest-version! dependency repositories)
        vulnerabilities (filterv (partial logic.gh.vulnerability/is-version-vulnerable? latest-version) all-dependency-vulnerabilities)]
    (when (not (seq vulnerabilities))
      latest-version)))

(defn ^:private scan-dependency
  [repositories allow-list {:keys [dependency] :as dependency-info}]
  (let [dependency-name-for-github (or (get dependency-rename dependency) dependency)
        all-dependency-vulnerabilities (diplomat.gh.advisory/vulnerabilities-by-package dependency-name-for-github)
        reported-vulnerabilities (filterv (partial logic.gh.vulnerability/is-version-vulnerable? dependency-info) all-dependency-vulnerabilities)
        ; not sure how to use it here and avoid always recommend the latest version (logic.gh.vulnerability/version-not-vulnerable all-dependency-vulnerabilities)
        filtered-vulnerabilities (remove (partial logic.rules.allowlist/by-pass? allow-list (ZonedDateTime/now ZoneOffset/UTC)) reported-vulnerabilities)
        latest-secure-version (latest-dependency-version dependency all-dependency-vulnerabilities repositories)]
    (if (seq filtered-vulnerabilities)
      (assoc dependency-info :vulnerabilities filtered-vulnerabilities :secure-version latest-secure-version)
      dependency-info)))

(defn scan-dependencies
  [dependencies repositories allow-list]
  (->> dependencies
       (pmap (partial scan-dependency repositories allow-list))
       (filterv :vulnerabilities)))

(comment
  (def repositories {:mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
                                 "clojars" {:url "https://repo.clojars.org/"}}})

  (scan-dependencies [{:dependency 'org.apache.commons/commons-compress :mvn/version "1.21"}] repositories {})

  (scan-dependencies [{:dependency 'org.postgresql/postgresql :mvn/version "42.2.10"}] repositories {}))
