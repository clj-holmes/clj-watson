(ns clj-watson.logic.dependency-check.vulnerability
  (:require
   [clj-watson.logic.dependency-check.version :as logic.version])
  (:import
   (org.owasp.dependencycheck.dependency Vulnerability)))

(defn ^:private base-score [cvss]
  {:score  (.getBaseScore cvss)
   :severity (-> cvss .getBaseSeverity str)
   :version (-> cvss .getVersion str)})

(defn ^:private cvss-base-scores [vulnerability]
  (->> [(some-> vulnerability .getCvssV2 .getCvssData base-score)
        (some-> vulnerability .getCvssV3 .getCvssData base-score)
        (some-> vulnerability .getCvssV4 .getCvssData base-score)]
       (keep identity)))

(defn ^:private highest-cvss-base-score
  "To be cautious, we take the highest cvss base score we can find across all cvss versions."
  [vulnerability]
  (->> (cvss-base-scores vulnerability)
       (sort-by (juxt :score :version))
       last))

(defn ^:private versions [vulnerability]
  (let [vulnerable-software (.getMatchedVulnerableSoftware vulnerability)]
    {:version-end-excluding   (.getVersionEndExcluding vulnerable-software)
     :version-start-excluding (.getVersionStartExcluding vulnerable-software)
     :version-end-including   (.getVersionEndIncluding vulnerable-software)
     :version-start-including (.getVersionStartIncluding vulnerable-software)}))

(defn ^:private build-vulnerability-map [vulnerability safe-versions]
  (let [vulnerability-identifier (.getName vulnerability)
        cvss (highest-cvss-base-score vulnerability)
        summary (format "Vulnerability %s with a score of %s and severity of %s found."
                        vulnerability-identifier
                        (or (:score cvss) "<unavailable>")
                        (or (:severity cvss) "<unavailable>"))]
    (-> (assoc-in {:advisory {:identifiers []}} [:advisory :identifiers 0 :value] vulnerability-identifier)
        (assoc-in [:advisory :cvss] (dissoc cvss :severity))
        (assoc-in [:advisory :severity] (:severity cvss))
        (assoc-in [:advisory :description] (.getDescription vulnerability))
        (assoc-in [:advisory :summary] summary)
        (assoc-in [:firstPatchedVersion :identifier] (-> safe-versions first vals first))
        (assoc :safe-versions safe-versions))))

(defn get-information
  [current-version all-versions ^Vulnerability vulnerability]
  (let [versions (versions vulnerability)
        cpe-version (-> vulnerability .getMatchedVulnerableSoftware .getVersion)]
    (when (logic.version/vulnerable? cpe-version versions current-version)
      (->> all-versions
           (filter (partial logic.version/newer-and-not-vulnerable-version? cpe-version versions current-version))
           (build-vulnerability-map vulnerability)))))

(comment
  ;; assuming you have an nvd db downloaded...
  (import [org.owasp.dependencycheck.data.nvdcve CveDB]
          [org.owasp.dependencycheck.utils Settings])

  (defn get-vulnerability [cve-id]
    (let [cve-db (CveDB. (Settings.))]
      (try
        (.open cve-db)
        (.getVulnerability cve-db cve-id)
        (finally
          (.close cve-db)))))

  (get-vulnerability "CVE-2014-3577")

  (cvss-base-scores (get-vulnerability "CVE-2014-3577"))
  ;; => ({:score 5.8, :severity "MEDIUM", :version "2.0"})

  (cvss-base-scores (get-vulnerability "CVE-2020-8903"))
  ;; => ({:score 6.9, :severity "MEDIUM", :version "2.0"}
  ;;     {:score 7.8, :severity "HIGH", :version "3.1"}
  ;;     {:score 7.3, :severity "HIGH", :version "4.0"})

  (cvss-base-scores (get-vulnerability "CVE-2023-38524"))
  ;; => ({:score 7.8, :severity "HIGH", :version "3.1"}
  ;;     {:score 2.0, :severity "LOW", :version "4.0"})

  (cvss-base-scores (get-vulnerability  "CVE-2024-7666"))
  ;; => ({:score 6.5, :severity "MEDIUM", :version "2.0"}
  ;;     {:score 5.3, :severity "MEDIUM", :version "3.1"}
  ;;     {:score 5.3, :severity "MEDIUM", :version "4.0"})

  (cvss-base-scores (get-vulnerability "CVE-2022-32170"))
  ;; => ()

  (build-vulnerability-map (get-vulnerability "CVE-2022-32170") [])
  ;; => {:advisory
  ;;     {:identifiers [{:value "CVE-2022-32170"}],
  ;;      :cvss nil,
  ;;      :severity nil,
  ;;      :description
  ;;      "The “Bytebase” application does not restrict low privilege user to access admin “projects“ for which an unauthorized user can view the “projects“ created by “Admin” and the affected endpoint is “/api/project?user=${userId}”.",
  ;;      :summary
  ;;      "Vulnerability CVE-2022-32170 with a score of <unavailable> and severity of <unavailable> has been found."},
  ;;     :firstPatchedVersion {:identifier nil},
  ;;     :safe-versions []}

  (build-vulnerability-map (get-vulnerability "CVE-2020-8903") [])
  ;; => {:advisory
  ;;     {:identifiers [{:value "CVE-2020-8903"}],
  ;;      :cvss {:score 7.8, :version "3.1"},
  ;;      :severity "HIGH",
  ;;      :description
  ;;      "A vulnerability in Google Cloud Platform's guest-oslogin versions between 20190304 and 20200507 allows a user that is only granted the role \"roles/compute.osLogin\" to escalate privileges to root. Using their membership to the \"adm\" group, users with this role are able to read the DHCP XID from the systemd journal. Using the DHCP XID, it is then possible to set the IP address and hostname of the instance to any value, which is then stored in /etc/hosts. An attacker can then point metadata.google.internal to an arbitrary IP address and impersonate the GCE metadata server which make it is possible to instruct the OS Login PAM module to grant administrative privileges. All images created after 2020-May-07 (20200507) are fixed, and if you cannot update, we recommend you edit /etc/group/security.conf and remove the \"adm\" user from the OS Login entry.",
  ;;      :summary
  ;;      "Vulnerability CVE-2020-8903 with a score of 7.8 and severity of HIGH has been found."},
  ;;     :firstPatchedVersion {:identifier nil},
  ;;     :safe-versions []}

  :eoc)
