(ns clj-watson.logic.dependency-check.vulnerability
  (:require
   [clj-watson.logic.dependency-check.version :as logic.version])
  (:import
   (org.owasp.dependencycheck.dependency Vulnerability)))

(defn ^:private cvssv3 [vulnerability]
  (try
    (some-> vulnerability .getCvssV3 .getBaseScore)
    (catch Exception _
      nil)))

(defn ^:private severity [vulnerability]
  (try
    (some-> vulnerability .getCvssV3 .getBaseSeverity)
    (catch Exception _
      nil)))

(defn ^:private versions [vulnerability]
  (let [vulnerable-software (.getMatchedVulnerableSoftware vulnerability)]
    {:version-end-excluding   (.getVersionEndExcluding vulnerable-software)
     :version-start-excluding (.getVersionStartExcluding vulnerable-software)
     :version-end-including   (.getVersionEndIncluding vulnerable-software)
     :version-start-including (.getVersionStartIncluding vulnerable-software)}))

(defn ^:private build-vulnerability-map [vulnerability safe-versions]
  (let [vulnerability-identifier (.getName vulnerability)
        vulnerability-cvss (cvssv3 vulnerability)
        vulnerability-severity (severity vulnerability)
        summary (format "Vulnerability identified as %s of score %s and severity %s found." vulnerability-identifier vulnerability-cvss vulnerability-severity)]
    (-> (assoc-in {:advisory {:identifiers []}} [:advisory :identifiers 0 :value] vulnerability-identifier)
        (assoc-in [:advisory :cvss :score] vulnerability-cvss)
        (assoc-in [:advisory :severity] vulnerability-severity)
        (assoc-in [:advisory :description] (.getDescription vulnerability))
        (assoc-in [:advisory :summary] summary)
        (assoc-in [:firstPatchedVersion :identifier] (-> safe-versions first vals first))
        (assoc :safe-versions safe-versions))))

(defn get-information
  [current-version all-versions ^Vulnerability vulnerability]
  (let [versions (versions vulnerability)
        cpe-version (-> vulnerability .getMatchedVulnerableSoftware .getVersion)]
    (when (logic.version/vulnerable? cpe-version versions current-version)
      (->> all-versions
           (filter (partial logic.version/newer-and-not-vulnerable-version? cpe-version versions current-version))
           (build-vulnerability-map vulnerability)))))
