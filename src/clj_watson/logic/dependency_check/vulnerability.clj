(ns clj-watson.logic.dependency-check.vulnerability
  (:require
   [clj-watson.logic.dependency-check.version :as logic.version])
  (:import
   (org.owasp.dependencycheck.dependency Vulnerability)))

(defn ^:private cvssv3 [vulnerability]
  (try
    (some-> vulnerability .getCvssV3 .getBaseScore)
    (catch Exception _
      nil)))

(defn ^:private severity [vulnerability]
  (try
    (some-> vulnerability .getCvssV3 .getBaseSeverity)
    (catch Exception _
      nil)))

(defn ^:private versions [vulnerability]
  (let [vulnerable-software (.getMatchedVulnerableSoftware vulnerability)]
    {:version-end-excluding   (.getVersionEndExcluding vulnerable-software)
     :version-start-excluding (.getVersionStartExcluding vulnerable-software)
     :version-end-including   (.getVersionEndIncluding vulnerable-software)
     :version-start-including (.getVersionStartIncluding vulnerable-software)}))

(defn ^:private build-vulnerability-map [vulnerability safe-versions]
  (-> (assoc-in {} [:advisory :identifiers] [{:value (.getName vulnerability)}])
      (assoc-in [:advisory :cvss :score] (cvssv3 vulnerability))
      (assoc-in [:advisory :severity] (severity vulnerability))
      (assoc :safe-versions safe-versions)
      (assoc :firstPatchedVersion (-> safe-versions first vals first))))

(defn get-information
  [current-version all-versions ^Vulnerability vulnerability]
  (let [versions (versions vulnerability)
        cpe-version (-> vulnerability .getMatchedVulnerableSoftware .getVersion)]
    (when (logic.version/vulnerable? cpe-version versions current-version)
      (->> all-versions
           (filter (partial logic.version/newer-and-not-vulnerable-version? cpe-version versions current-version))
           (build-vulnerability-map vulnerability)))))