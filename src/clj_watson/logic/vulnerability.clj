(ns clj-watson.logic.vulnerability
  (:require [version-clj.core :as version]
            [clojure.string :as string]
            [clj-watson.logic.dependency :as logic.dependency]))

(def ^:private operators
  {">"  version/newer?
   ">=" version/newer-or-equal?
   "<"  version/older?
   "="  =
   "<=" version/older-or-equal?})

(defn is-version-vulnerable? [version {:keys [vulnerableVersionRange]}]
  (let [version (logic.dependency/get-dependency-version version)
        validate-fn (->> (string/split vulnerableVersionRange #",")
                         (map string/trim)
                         (map #(string/split % #"\s"))
                         (map (fn [[op vulnerability-version]]
                                #((get operators op) % vulnerability-version)))
                         (apply juxt))]
    (every? true? (validate-fn version))))

(defn version-not-vulnerable [vulnerabilities]
  (->> vulnerabilities
       (map (comp :identifier :firstPatchedVersion))
       (filter identity)
       version/version-sort
       last))

(comment
  (is-version-vulnerable? {:mvn/version "1"} {:vulnerableVersionRange "> 0.1, <= 0.4"})

  (latest-version-not-vulnerable [{:firstPatchedVersion {:identifier "3"}}
                                  {:firstPatchedVersion {:identifier "1.3"}}
                                  {:firstPatchedVersion {:identifier nil}}
                                  {:firstPatchedVersion {:identifier "1.1"}}]))